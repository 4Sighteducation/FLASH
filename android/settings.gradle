pluginManagement {
  repositories {
    // Order matters: plugin portal first, then Google & Maven Central
    gradlePluginPortal()
    google()
    mavenCentral()
  }

  // Make the React Native Gradle plugin available without a version
  includeBuild(
    new File(
      ["node","--print","require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"]
        .execute(null, rootDir)
        .text
        .trim()
    ).getParentFile()
  )

  // Make Expo Modules' Gradle plugin available (and rename it to avoid project name clash)
  includeBuild(
    new File(
      ["node","--print","require.resolve('expo-modules-core/package.json')"]
        .execute(null, rootDir)
        .text
        .trim()
    ).getParentFile()
  ) {
    name = "expo-modules-core-plugin" // prevents collision with :expo-modules-core project from autolinking
  }
}

// Apply the RN settings plugin (no version needed because of includeBuild above)
plugins {
  id("com.facebook.react.settings")
}

rootProject.name = "FLASH"
include(":app")

// ----- React Native config (don't touch) -----
def rnGradlePluginDir = new File(
  ["node","--print","require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"]
    .execute(null, rootDir).text.trim()
).getParentFile()
apply(from: new File(rnGradlePluginDir, "react-native-configuration.gradle"))

// ----- Expo autolinking (keep both lines) -----
def expoAutolinkingScript = new File(
  ["node","--print","require.resolve('expo/package.json')"]
    .execute(null, rootDir).text.trim()
).getParentFile().toPath().resolve("scripts/autolinking.gradle").toFile()
apply(from: expoAutolinkingScript)
useExpoModules() // this wires up :expo, :expo-modules-core, etc. (as *projects*)
